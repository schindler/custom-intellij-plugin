/* The following code was generated by JFlex 1.4.3 on 4/10/16 11:34 PM */

package br.com.phoebus.wmls.editor.parser;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static br.com.phoebus.wmls.editor.parser.psi.WmlsTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/10/16 11:34 PM from the specification file
 * <tt>/Users/raunysouza/Java/Workspace-Intellij/wmls-editor/src/br/com/phoebus/wmls/editor/parser/_WmlsLexer.flex</tt>
 */
public class _WmlsLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\0\1\1\1\1\22\0\1\1\1\30\1\10"+
    "\1\4\1\0\1\21\1\24\1\6\1\37\1\40\1\12\1\14\1\32"+
    "\1\15\1\0\1\11\1\5\11\5\1\0\1\31\1\23\1\13\1\22"+
    "\2\0\2\5\1\41\2\5\1\44\5\5\1\43\5\5\1\42\5\5"+
    "\1\5\2\5\1\35\1\7\1\36\1\25\1\3\1\0\1\52\1\5"+
    "\1\55\1\16\1\45\1\53\1\63\1\5\1\17\1\5\1\62\1\60"+
    "\1\5\1\51\1\56\1\61\1\5\1\50\1\57\1\47\1\54\1\20"+
    "\1\5\1\46\2\5\1\33\1\26\1\34\1\27\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\3\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\3\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\6\3\1\0\1\32"+
    "\3\0\1\33\1\0\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\3\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\7\3\1\32"+
    "\2\0\1\56\1\57\1\60\1\61\4\3\1\62\1\63"+
    "\1\3\2\0\1\64\1\0\1\65\1\66\1\67\4\3"+
    "\1\64\1\70\4\3\1\71\1\72\3\3\1\73\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\64\0\u0410\0\64\0\64"+
    "\0\64\0\64\0\64\0\64\0\64\0\64\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u0138\0\64\0\u057c\0\u016c"+
    "\0\u05b0\0\u05e4\0\u0618\0\64\0\64\0\64\0\64\0\64"+
    "\0\64\0\64\0\u064c\0\64\0\64\0\u0680\0\64\0\u06b4"+
    "\0\64\0\64\0\64\0\64\0\64\0\64\0\u06e8\0\u071c"+
    "\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u016c\0\u0854\0\u0888"+
    "\0\u08bc\0\64\0\u08f0\0\64\0\u0924\0\u0958\0\u098c\0\u09c0"+
    "\0\u0104\0\u0104\0\u09f4\0\u0a28\0\u0a5c\0\u0a5c\0\u0a90\0\64"+
    "\0\64\0\u0104\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0854\0\u0a5c"+
    "\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0104\0\u0104\0\u0c64\0\u0c98"+
    "\0\u0ccc\0\u0104\0\u0104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\2\6\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\3\6\1\40\3\6\1\41\1\6\1\42\1\43\4\6"+
    "\1\44\2\6\65\0\2\3\64\0\1\4\1\0\1\4"+
    "\10\0\3\4\20\0\23\4\4\0\2\5\10\0\3\5"+
    "\20\0\23\5\3\0\1\4\1\5\1\6\10\0\3\6"+
    "\20\0\23\6\6\45\1\46\1\47\54\45\7\50\1\51"+
    "\1\46\53\50\11\0\1\52\1\53\1\54\63\0\1\55"+
    "\63\0\1\56\63\0\1\57\1\60\62\0\1\61\1\0"+
    "\1\62\51\0\1\4\1\5\1\6\10\0\1\6\1\63"+
    "\1\6\20\0\23\6\13\0\1\64\63\0\1\65\6\0"+
    "\1\66\54\0\1\67\7\0\1\70\53\0\1\71\10\0"+
    "\1\72\52\0\1\73\63\0\1\74\12\0\1\75\50\0"+
    "\1\76\53\0\1\4\1\5\1\6\10\0\3\6\20\0"+
    "\1\6\1\77\21\6\3\0\1\4\1\5\1\6\10\0"+
    "\3\6\20\0\5\6\1\100\15\6\3\0\1\4\1\5"+
    "\1\6\10\0\3\6\20\0\11\6\1\101\11\6\3\0"+
    "\1\4\1\5\1\6\10\0\3\6\20\0\13\6\1\102"+
    "\7\6\3\0\1\4\1\5\1\6\10\0\3\6\20\0"+
    "\7\6\1\103\6\6\1\104\4\6\3\0\1\4\1\5"+
    "\1\6\10\0\3\6\20\0\11\6\1\105\11\6\2\45"+
    "\1\0\61\45\7\50\1\51\1\106\53\50\2\52\1\0"+
    "\61\52\12\107\1\110\51\107\3\0\1\4\1\5\1\6"+
    "\10\0\2\6\1\111\20\0\23\6\13\0\1\112\6\0"+
    "\1\113\54\0\1\114\53\0\1\4\1\5\1\6\10\0"+
    "\3\6\20\0\2\6\1\115\20\6\3\0\1\4\1\5"+
    "\1\6\10\0\3\6\20\0\6\6\1\116\14\6\3\0"+
    "\1\4\1\5\1\6\10\0\3\6\20\0\6\6\1\117"+
    "\14\6\3\0\1\4\1\5\1\6\10\0\3\6\20\0"+
    "\10\6\1\120\12\6\3\0\1\4\1\5\1\6\10\0"+
    "\3\6\20\0\17\6\1\121\3\6\3\0\1\4\1\5"+
    "\1\6\10\0\3\6\20\0\4\6\1\122\16\6\3\0"+
    "\1\4\1\5\1\6\10\0\3\6\20\0\14\6\1\123"+
    "\6\6\12\107\1\124\51\107\11\125\1\126\1\127\51\125"+
    "\3\0\1\4\1\5\1\6\5\0\1\130\2\0\3\6"+
    "\20\0\23\6\13\0\1\131\53\0\1\4\1\5\1\6"+
    "\10\0\3\6\20\0\3\6\1\132\17\6\3\0\1\4"+
    "\1\5\1\6\10\0\3\6\20\0\4\6\1\133\16\6"+
    "\3\0\1\4\1\5\1\6\10\0\1\6\1\134\1\6"+
    "\20\0\23\6\3\0\1\4\1\5\1\6\10\0\3\6"+
    "\20\0\14\6\1\135\6\6\3\0\1\4\1\5\1\6"+
    "\10\0\3\6\20\0\21\6\1\136\1\6\11\107\1\137"+
    "\1\124\51\107\12\125\1\127\62\125\1\140\1\127\51\125"+
    "\3\0\1\4\1\5\1\6\10\0\3\6\20\0\7\6"+
    "\1\141\13\6\3\0\1\4\1\5\1\6\10\0\2\6"+
    "\1\142\20\0\23\6\3\0\1\4\1\5\1\6\10\0"+
    "\3\6\20\0\6\6\1\143\14\6\3\0\1\4\1\5"+
    "\1\6\10\0\3\6\20\0\11\6\1\144\11\6\3\0"+
    "\1\4\1\5\1\6\10\0\3\6\20\0\10\6\1\145"+
    "\12\6\3\0\1\4\1\5\1\6\10\0\3\6\20\0"+
    "\4\6\1\146\16\6\3\0\1\4\1\5\1\6\10\0"+
    "\1\6\1\147\1\6\20\0\23\6\3\0\1\4\1\5"+
    "\1\6\10\0\3\6\20\0\22\6\1\150\3\0\1\4"+
    "\1\5\1\6\10\0\3\6\20\0\15\6\1\151\5\6"+
    "\3\0\1\4\1\5\1\6\10\0\3\6\20\0\4\6"+
    "\1\152\16\6\3\0\1\4\1\5\1\6\10\0\3\6"+
    "\20\0\10\6\1\153\12\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3328];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\1\11\1\1\10\11\6\1\1\0"+
    "\1\11\3\0\1\1\1\0\7\11\1\1\2\11\1\1"+
    "\1\11\1\1\6\11\10\1\2\0\1\1\1\11\1\1"+
    "\1\11\7\1\2\0\1\1\1\0\2\11\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _WmlsLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _WmlsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 60: 
          { return FUNCTION;
          }
        case 61: break;
        case 45: 
          { return OP_INEQUALITY;
          }
        case 62: break;
        case 22: 
          { return LEFT_BRACKET;
          }
        case 63: break;
        case 8: 
          { return OP_ADD;
          }
        case 64: break;
        case 49: 
          { return OP_BITWISE_LEFT_ASSIGN;
          }
        case 65: break;
        case 35: 
          { return OP_MOD_ASSIGN;
          }
        case 66: break;
        case 18: 
          { return SEMICOLON;
          }
        case 67: break;
        case 33: 
          { return OP_SUB_ASSIGN;
          }
        case 68: break;
        case 56: 
          { return DOC_COMMENT;
          }
        case 69: break;
        case 58: 
          { return NATIVE;
          }
        case 70: break;
        case 55: 
          { return CRLF;
          }
        case 71: break;
        case 7: 
          { return OP_ASSIGN;
          }
        case 72: break;
        case 46: 
          { return OP_INT_DIVIDE;
          }
        case 73: break;
        case 4: 
          { return PACKAGE_IDENTIFIER;
          }
        case 74: break;
        case 32: 
          { return OP_INCR;
          }
        case 75: break;
        case 14: 
          { return OP_BITWISE_XOR;
          }
        case 76: break;
        case 36: 
          { return OP_GREATER_THAN_EQUAL;
          }
        case 77: break;
        case 24: 
          { return LEFT_PAREN;
          }
        case 78: break;
        case 53: 
          { return OP_INT_DIV_ASSIGN;
          }
        case 79: break;
        case 19: 
          { return COMMA;
          }
        case 80: break;
        case 9: 
          { return OP_SUBTRACT;
          }
        case 81: break;
        case 52: 
          { return BLOCK_COMMENT;
          }
        case 82: break;
        case 37: 
          { return BITSHIFT_RIGHT;
          }
        case 83: break;
        case 5: 
          { return OP_DIVIDE;
          }
        case 84: break;
        case 11: 
          { return OP_GREATER_THAN;
          }
        case 85: break;
        case 38: 
          { return OP_LESS_THAN_EQUAL;
          }
        case 86: break;
        case 13: 
          { return OP_BITWISE_AND;
          }
        case 87: break;
        case 16: 
          { return OP_BITWISE_NOT;
          }
        case 88: break;
        case 48: 
          { return OP_BITWISE_RIGTH_ZERO;
          }
        case 89: break;
        case 31: 
          { return OP_ADD_ASSIGN;
          }
        case 90: break;
        case 28: 
          { return OP_DIV_ASSIGN;
          }
        case 91: break;
        case 30: 
          { return OP_EQUAL;
          }
        case 92: break;
        case 47: 
          { return OP_BITWISE_RIGHT_ASSIGN;
          }
        case 93: break;
        case 50: 
          { return URL;
          }
        case 94: break;
        case 20: 
          { return LEFT_BRACE;
          }
        case 95: break;
        case 27: 
          { return LINE_COMMENT;
          }
        case 96: break;
        case 12: 
          { return OP_LESS_THAN;
          }
        case 97: break;
        case 25: 
          { return RIGHT_PAREN;
          }
        case 98: break;
        case 40: 
          { return OP_BITWISE_AND_ASSIGN;
          }
        case 99: break;
        case 10: 
          { return OP_MOD;
          }
        case 100: break;
        case 23: 
          { return RIGHT_BRACKET;
          }
        case 101: break;
        case 43: 
          { return OP_BITWISE_OR_ASSIGN;
          }
        case 102: break;
        case 59: 
          { return PACKAGE;
          }
        case 103: break;
        case 51: 
          { return USE;
          }
        case 104: break;
        case 39: 
          { return BITSHIFT_LEFT;
          }
        case 105: break;
        case 29: 
          { return OP_MULT_ASSIGN;
          }
        case 106: break;
        case 26: 
          { return STRING;
          }
        case 107: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 108: break;
        case 44: 
          { return OP_OR;
          }
        case 109: break;
        case 3: 
          { return IDENTIFIER;
          }
        case 110: break;
        case 54: 
          { return OP_BITWISE_RIGHT_ZERO_ASSIGN;
          }
        case 111: break;
        case 15: 
          { return OP_BITWISE_OR;
          }
        case 112: break;
        case 41: 
          { return OP_AND;
          }
        case 113: break;
        case 6: 
          { return OP_MULTIPLY;
          }
        case 114: break;
        case 17: 
          { return OP_NOT;
          }
        case 115: break;
        case 42: 
          { return OP_BITWISE_XOR_ASSIGN;
          }
        case 116: break;
        case 57: 
          { return EXTERN;
          }
        case 117: break;
        case 21: 
          { return RIGHT_BRACE;
          }
        case 118: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 119: break;
        case 34: 
          { return OP_DECR;
          }
        case 120: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
