{
    parserClass="br.com.phoebus.wmls.editor.parser.WmlsParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Wmls"
    psiImplClassSuffix="Impl"
    psiPackage="br.com.phoebus.wmls.editor.parser.psi"
    psiImplPackage="br.com.phoebus.wmls.editor.parser.psi.impl"

    elementTypeHolderClass="br.com.phoebus.wmls.editor.parser.psi.WmlsTypes"
    elementTypeClass="br.com.phoebus.wmls.editor.parser.psi.WmlsElementType"
    tokenTypeClass="br.com.phoebus.wmls.editor.parser.psi.WmlsTokenType"

    tokens = [
        //Assign Operators
        OP_ASSIGN="="
        OP_ADD_ASSIGN="+="
        OP_SUB_ASSIGN="-="
        OP_MULT_ASSIGN="*="
        OP_DIV_ASSIGN="/="
        OP_INT_DIV_ASSIGN="div="
        OP_MOD_ASSIGN="%="
        OP_BITWISE_RIGHT_ASSIGN=">>="
        OP_BITWISE_LEFT_ASSIGN="<<="
        OP_BITWISE_RIGHT_ZERO_ASSIGN=">>>="
        OP_BITWISE_AND_ASSIGN="&="
        OP_BITWISE_XOR_ASSIGN="^="
        OP_BITWISE_OR_ASSIGN="|="

        //Arithmetic Operators
        OP_ADD="+"
        OP_SUBTRACT="-"
        OP_MULTIPLY="*"
        OP_DIVIDE="/"
        OP_INT_DIVIDE="div"
        OP_MOD="%"
        OP_BITWISE_LEFT="<<"
        OP_BITWISE_RIGHT=">>"
        OP_BITWISE_RIGTH_ZERO=">>>"
        OP_BITWISE_AND="&"
        OP_BITWISE_OR="|"
        OP_BITWISE_XOR="^"

        OP_INCR="++";
        OP_DECR="--"
        OP_BITWISE_NOT="~"

        //Logical Operators
        OP_AND="&&"
        OP_OR="||"
        OP_NOT="!"

        //Comparison Operators
        OP_LESS_THAN="<"
        OP_LESS_THAN_EQUAL="<="
        OP_EQUAL="=="
        OP_GREATER_THAN_EQUAL=">="
        OP_GREATER_THAN=">"
        OP_INEQUALITY="!="

        SEMICOLON=";"
        COMMA=","
        LEFT_BRACE="{"
        RIGHT_BRACE="}"
        LEFT_BRACKET="["
        RIGHT_BRACKET="]"
        LEFT_PAREN="("
        RIGHT_PAREN=")"
        BITSHIFT_LEFT="<<"
        BITSHIFT_RIGHT=">>"

        SPACE='regexp:\s+'
        ID="regexp:\w+"
        STRING="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\\"|\\\'|\\)*\")"
        NUMBER="regexp:\d+"
        HEX="regexp:0([xX])*([0-9a-fA-F])*"
        LINE_COMMENT="regexp://.*"
        BLOCK_COMMENT="regexp:/\*(.|\n)*\*/"
        DOC_COMMENT="regexp:/\**(.|\n)*\*/"
        IDENTIFIER="regexp:$([a-zA-Z_])+(\d | \D)"
    ]
}

wmlsFile ::= functionDeclaration

//----------------- Expressions -----------------
//Assigment Expression
assigmentExpression ::= IDENTIFIER OP_ASSIGN IDENTIFIER

//----------------- Functions -----------------
//Function Declaration
functionDeclaration ::=
    ('extern' | 'native')? 'function' identifier LEFT_PAREN (formalParameterList)? RIGHT_PAREN block (SEMICOLON)?

formalParameterList ::= IDENTIFIER | formalParameterList COMMA IDENTIFIER

//Local Function Call
localFunctionCall ::= functionName arguments

functionName ::= IDENTIFIER

arguments ::= LEFT_PAREN (argumentList)? RIGHT_PAREN

argumentList ::= assigmentExpression | argumentList COMMA assigmentExpression

//External Function call

//Library Function call

//----------------- Statements -----------------
//Empty Statement

//Expression Statement

//Block Statement
block ::= LEFT_BRACE RIGHT_BRACE

//Variable Statement

//If Statement

//While Statement

//For Statement

//Break Statement

//Continue

//Return Statement

//Pragma Statement